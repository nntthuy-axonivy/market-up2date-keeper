name: Checking dangling commits by Gitleaks

on:
  workflow_dispatch:
    inputs:
      workingOrgs:
        description: 'Comma-separated orgs to scan'
        default: 'axonivy-market'
      workingRepos:
        description: 'Comma-separated list of repo names (optional)'
        default: ''

jobs:
  gitleaks-scan:
    runs-on: ubuntu-latest
    env:
    GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout (for workflow context)
        uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r '.tag_name')
          curl -sL "https://github.com/gitleaks/gitleaks/releases/download/${VERSION}/gitleaks_${VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Prepare inputs
        id: prep
        run: |
          echo "ORGS=${{ github.event.inputs.workingOrgs || 'axonivy-market' }}" >> $GITHUB_ENV
          echo "REPOS=${{ github.event.inputs.workingRepos || '' }}" >> $GITHUB_ENV

      - name: Run Gitleaks scanning
        run: |
          IFS=',' read -ra ORG_LIST <<< "$ORGS"
          mkdir -p gitleaks-reports
          CSV_REPORT="gitleaks-reports/scanning-commits-report.csv"
          for ORG in "${ORG_LIST[@]}"; do
            echo "üîç Fetching repos from $ORG"

            if [ -n "$REPOS" ]; then
              IFS=',' read -ra REPO_LIST <<< "$REPOS"
            else
              mapfile -t REPO_LIST < <(gh repo list "$ORG" --limit 1000 --json name -q '.[].name')
            fi

            echo "üì¶ Found ${#REPO_LIST[@]} repositories in $ORG"

            for REPO in "${REPO_LIST[@]}"; do
              echo "üö® Scanning $ORG/$REPO ..."
              rm -rf "$REPO"
              if ! git clone https://github.com/$ORG/$REPO.git; then
                echo "‚ùå Failed to clone $ORG/$REPO. Skipping..."
                continue
              fi
              cd "$REPO"

              TEMP_REPORT="../gitleaks-reports/tmp-${ORG}__${REPO}.json"
              gitleaks detect --source="$REPO" --report-path="$TEMP_REPORT" \
                --report-format=json --redact || true

              if [ -s "$TEMP_REPORT" ] && [ "$(jq length "$TEMP_REPORT")" -gt 0 ]; then
                echo "‚úÖ Secrets found in $ORG/$REPO"

                jq -r --arg org "$ORG" --arg repo "$REPO" '
                  .[] | [
                    $org,
                    $repo,
                    .rule,
                    .file,
                    (.line // 0),
                    .commit,
                    (.author // "unknown"),
                    (.date // ""),
                    (.secret // "REDACTED")
                  ] | @csv' "$TEMP_REPORT" >> "$CSV_REPORT"
              else
                echo "‚ÑπÔ∏è No secrets found in $ORG/$REPO"
              fi

              cd ..
              rm -rf "$REPO"
            done
          done
          echo "‚úÖ Secret scanning complete!"

      - name: Upload Gitleaks Reports
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports
          path: gitleaks-reports/