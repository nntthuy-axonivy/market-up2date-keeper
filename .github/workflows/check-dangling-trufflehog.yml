name: Checking dangling commits by Trufflehog

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      workingOrgs:
        description: 'Comma-separated orgs to scan'
        default: 'axonivy-market'
      workingRepos:
        description: 'Comma-separated list of repo names (optional)'
        default: ''

jobs:
  truffle-scan:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install TruffleHog v3 (binary)
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin v3.81.9
          trufflehog --version

      - name: Prepare inputs
        run: |
          echo "ORGS=${{ github.event.inputs.workingOrgs || 'axonivy-market' }}" >> $GITHUB_ENV
          echo "REPOS=${{ github.event.inputs.workingRepos || '' }}" >> $GITHUB_ENV

      - name: Run TruffleHog scan and output CSV
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          mkdir -p trufflehog-csv

          IFS=',' read -ra ORG_LIST <<< "$ORGS"

          for ORG in "${ORG_LIST[@]}"; do
            echo "🔍 Fetching repos from $ORG"

            if [ -n "$REPOS" ]; then
              IFS=',' read -ra REPO_LIST <<< "$REPOS"
            else
              mapfile -t REPO_LIST < <(gh repo list "$ORG" --limit 1000 --json name -q '.[].name')
            fi

            echo "📦 Found ${#REPO_LIST[@]} repositories in $ORG: ${REPO_LIST[*]}"

            for REPO in "${REPO_LIST[@]}"; do
              echo "🚨 Scanning $ORG/$REPO ..."
              rm -rf "$REPO"
              REPO_URL="https://github.com/$ORG/$REPO.git"
              REPORT_CSV="trufflehog-csv/${ORG}__${REPO}.csv"
              TEMP_JSON="trufflehog-csv/${ORG}__${REPO}.json"

              echo "Executing: trufflehog git $REPO_URL --json > $TEMP_JSON"
              trufflehog git "$REPO_URL" --json > "$TEMP_JSON" || true

              if [ -s "$TEMP_JSON" ]; then
                echo '"branch","commit","commitHash","date","path","reason","stringsFound","diff","printDiff"' > "$REPORT_CSV"
                jq -r '
                  select(type == "object") |
                  [
                    (.branch // ""),
                    (.commit // "" | gsub("[\n\r]"; " ")),
                    (.commitHash // ""),
                    (.date // ""),
                    (.path // ""),
                    (.reason // ""),
                    (.stringsFound // [] | join(" | ")),
                    (.diff // "" | gsub("[\n\r]"; " ")),
                    (.printDiff // "" | gsub("[\n\r]|\u001b\\[[0-9;]*m"; " "))
                  ] | @csv
                ' "$TEMP_JSON" >> "$REPORT_CSV"
              else
                echo "No findings for $ORG/$REPO, creating empty CSV"
                echo '"branch","commit","commitHash","date","path","reason","stringsFound","diff","printDiff"' > "$REPORT_CSV"
              fi
              rm -f "$TEMP_JSON"
            done
          done
          echo "✅ TruffleHog scanning complete!"

      - name: Upload TruffleHog CSV Reports
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-csv
          path: trufflehog-csv/