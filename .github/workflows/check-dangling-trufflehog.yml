name: Checking dangling commits by Trufflehog

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      workingOrgs:
        description: 'Comma-separated orgs to scan'
        default: 'axonivy-market'
      workingRepos:
        description: 'Comma-separated list of repo names (optional)'
        default: ''

jobs:
  truffle-scan:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install TruffleHog v3 (binary)
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version

      - name: Prepare inputs
        run: |
          echo "ORGS=${{ github.event.inputs.workingOrgs || 'axonivy-market' }}" >> $GITHUB_ENV
          echo "REPOS=${{ github.event.inputs.workingRepos || '' }}" >> $GITHUB_ENV

      - name: Run TruffleHog scan and generate CSV
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          mkdir -p trufflehog-csv raw-json

          IFS=',' read -ra ORG_LIST <<< "$ORGS"

          for ORG in "${ORG_LIST[@]}"; do
            echo "🔍 Fetching repos from $ORG"

            if [ -n "$REPOS" ]; then
              IFS=',' read -ra REPO_LIST <<< "$REPOS"
            else
              mapfile -t REPO_LIST < <(gh repo list "$ORG" --limit 1000 --json name -q '.[].name')
            fi

            echo "📦 Found ${#REPO_LIST[@]} repositories in $ORG"
            for REPO in "${REPO_LIST[@]}"; do
              echo "🚨 Scanning $ORG/$REPO ..."
              rm -rf "$REPO"
              mkdir -p trufflehog-csv
              REPO_URL="https://github.com/axonivy-market/x-connector.git"
              RAW_JSON="trufflehog-csv/output.jsonl"
              REPORT_CSV="trufflehog-csv/output.csv"

              # 1. Run TruffleHog and capture only JSON lines (exclude logs)
              trufflehog git "$REPO_URL" --json > "$RAW_JSON"

              # 2. Write CSV header
              echo '"branch","commitMessage","commitHash","date","filePath","reason","stringsFound","diff"' > "$REPORT_CSV"

              # 3. Filter real findings only (ignore logs), convert to CSV
              cat "$RAW_JSON" | jq -c 'select(.branch and .commit and .commitHash)' | jq -r '
              [
                .branch,
                (.commit | gsub("[\n\r]"; " ")),
                .commitHash,
                .date,
                .path,
                .reason,
                (.stringsFound // [] | join(" | ")),
                (.diff | gsub("[\n\r]"; " "))
              ] | @csv' >> "$REPORT_CSV"

              echo "✅ Done. CSV content:"
              cat "$REPORT_CSV"


            done
          done

          echo "✅ TruffleHog scanning and CSV conversion complete!"

      - name: Upload TruffleHog CSV Reports
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-csv
          path: trufflehog-csv/
